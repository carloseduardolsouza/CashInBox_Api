const webhooks = async (req, res) => {
  // Tornar a fun√ß√£o ass√≠ncrona para opera√ß√µes futuras (ex: DB, API)
  try {
    const evento = req.body;

    // --- Valida√ß√£o b√°sica para evitar processar requisi√ß√µes inv√°lidas ---
    if (!evento || Object.keys(evento).length === 0) {
      console.warn("‚ö†Ô∏è Webhook recebido vazio ou inv√°lido.");
      return res.status(400).send("Requisi√ß√£o inv√°lida"); // Retorna 400 para bad request
    }

    console.log("üì© Webhook recebido:");
    // Usar JSON.stringify para um log mais limpo e leg√≠vel em ambientes de produ√ß√£o
    // { depth: null } no console.dir √© bom para dev, mas em produ√ß√£o pode ser verboso demais
    console.log(JSON.stringify(evento, null, 2));

    // Verifique o tipo do evento de forma mais robusta, considerando diferentes estruturas
    // Mercado Pago pode enviar 'type' ou 'topic' para identificar o evento
    const tipo = evento.type || evento.topic || evento.action;

    // --- Processamento de Eventos Espec√≠ficos ---
    switch (tipo) {
      case "payment":
        // Verifica se evento.data e evento.data.id existem para evitar erros
        const paymentId = evento.data?.id;

        if (!paymentId) {
          console.warn("‚ö†Ô∏è Evento de pagamento recebido sem ID de pagamento.");
          // Pode retornar um 400 ou 200, dependendo da sua toler√¢ncia a eventos "incompletos"
          return res.status(400).send("ID do pagamento ausente.");
        }

        console.log(`üí∞ Pagamento atualizado: ID = ${paymentId}`);

        // --- EXERC√çCIO IMPORTANTE: Persist√™ncia de Dados e L√≥gica de Neg√≥cio ---
        // Aqui √© onde a l√≥gica real de atualiza√ß√£o do seu sistema acontece.
        // √â CR√çTICO que essa parte seja robusta.
        try {
          // Exemplo de como voc√™ CHAMARIA uma fun√ß√£o para atualizar o banco de dados
          // await atualizarStatusDoPagamentoNoBanco(paymentId, 'aprovado', evento);
          // await registrarTransacaoNoCaixa(paymentId, evento.data.transaction_amount);

          // Lembre-se de tratar casos de sucesso e falha da atualiza√ß√£o do DB
          console.log(
            `‚úÖ L√≥gica de neg√≥cio para o pagamento ${paymentId} processada.`
          );
        } catch (dbError) {
          console.error(
            `‚ùå Erro ao atualizar o banco de dados para o pagamento ${paymentId}:`,
            dbError.message
          );
          // Decida se voc√™ quer retornar 500 aqui para que o Mercado Pago tente novamente,
          // ou 200 se voc√™ registrou o erro e n√£o quer re-tentativas desnecess√°rias.
          // Para idempot√™ncia, geralmente √© melhor retornar 200 se voc√™ j√° "recebeu" o webhook.
          // O tratamento de erro DEVE garantir que o DB esteja consistente.
          return res.status(500).send("Erro interno ao processar pagamento.");
        }
        break;

      case "merchant_order": // Exemplo de outro tipo de evento comum
        console.log(`üì¶ Ordem de compra atualizada: ID = ${evento.resource}`);
        // Implementar l√≥gica para ordens de compra
        break;

      // Adicione outros cases para tipos de eventos que voc√™ precise processar
      default:
        console.log(
          `‚ÑπÔ∏è Tipo de evento desconhecido ou n√£o processado: ${tipo}`
        );
        break;
    }

    // --- Resposta obrigat√≥ria e crucial para o Mercado Pago ---
    // Sempre retorne 200 OK para indicar que voc√™ recebeu e processou o webhook.
    // Isso evita que o Mercado Pago continue tentando reenviar o mesmo evento.
    res.status(200).send("OK");
  } catch (error) {
    console.error(
      "‚ùå Erro catastr√≥fico no webhook:",
      error.message,
      error.stack
    );
    // Em caso de erro, o Mercado Pago espera um status diferente de 2xx para re-tentar.
    // Retornar 500 √© o padr√£o para erros internos.
    res.status(500).send("Erro interno no webhook");
  }
};

module.exports = { webhooks };
